import type { PrepareAnnounceParams, PrepareAnnounceReturnType } from './types';
/**
 * Prepares the payload for announcing a stealth address to the ERC5564 contract.
 * It simulates the contract call to generate the necessary payload without actually sending a transaction.
 * This payload can then be used for signing and sending a transaction.
 *
 * @param {PrepareAnnounceParams} params The parameters required to prepare the announcement.
 * @property {EthAddress} ERC5564Address The address of the ERC5564 contract.
 * @property {AnnounceArgs} args The announcement details, including:
 *  - {VALID_SCHEME_ID} schemeId The scheme id per ERC5564.
 *  - {`0x${string}`} stealthAddress The stealth address being announced.
 *  - {`0x${string}`} ephemeralPublicKey The ephemeral public key for this announcement.
 *  - {`0x${string}`} metadata Additional metadata for the announcement including the view tag.
 * @property {`0x${string}`} account The address of the account making the announcement.
 * @property {ClientParams} clientParams Optional client parameters for direct function use.
 * @returns {Promise<PrepareAnnounceReturnType>} The prepared announcement payload, including the transaction data.
 *
 * @throws {PrepareError} - Throws a PrepareError if the contract call simulation fails.
 */
declare function prepareAnnounce({ ERC5564Address, args, account, clientParams }: PrepareAnnounceParams): Promise<PrepareAnnounceReturnType>;
export default prepareAnnounce;
