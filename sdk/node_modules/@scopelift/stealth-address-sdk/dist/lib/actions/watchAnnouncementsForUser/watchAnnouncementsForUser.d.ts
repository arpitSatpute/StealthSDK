import type { WatchAnnouncementsForUserParams, WatchAnnouncementsForUserReturnType } from '..';
/**
 * Watches for announcement events relevant to the user.
 *
 * @template T - The return type of the handleLogsForUser callback function.
 * @property {EthAddress} ERC5564Address - The Ethereum address of the ERC5564 contract.
 * @property {AnnouncementArgs} args - Arguments to filter the announcements.
 * @property {(logs: AnnouncementLog[]) => T} handleLogsForUser - Callback function to handle the filtered announcement logs.
 *   This function receives an array of AnnouncementLog and returns a generic value.
 * @property {WatchAnnouncementsForUserPollingOptions} [pollOptions] - Optional polling options to configure the behavior of watching announcements.
 *   This includes configurations such as polling frequency.
 * @property {Omit<GetAnnouncementsForUserParams, 'announcements'>} - Inherits all properties from GetAnnouncementsForUserParams except 'announcements'.
 *   This typically includes cryptographic keys and filter lists for inclusion or exclusion of specific announcements.
 */
declare function watchAnnouncementsForUser<T = void>({ args, spendingPublicKey, viewingPrivateKey, ERC5564Address, clientParams, excludeList, includeList, handleLogsForUser, pollOptions }: WatchAnnouncementsForUserParams<T>): Promise<WatchAnnouncementsForUserReturnType>;
export default watchAnnouncementsForUser;
