import type { EthAddress } from '../../..';
import type { ClientParams } from '../../stealthClient/types';
import type { AnnouncementLog } from '../getAnnouncements/types';
export type GetAnnouncementsForUserParams = {
    announcements: AnnouncementLog[];
    spendingPublicKey: `0x${string}`;
    viewingPrivateKey: `0x${string}`;
    clientParams?: ClientParams;
    excludeList?: EthAddress[];
    includeList?: EthAddress[];
};
export type GetAnnouncementsForUserReturnType = AnnouncementLog[];
export type ProcessAnnouncementParams = Omit<GetAnnouncementsForUserParams, 'announcements' | 'excludeList' | 'includeList'> & {
    excludeList: Set<EthAddress>;
    includeList: Set<EthAddress>;
};
export type ProcessAnnouncementReturnType = AnnouncementLog | null;
export declare class FromValueNotFoundError extends Error {
    constructor(message?: string);
}
export declare class TransactionHashRequiredError extends Error {
    constructor(message?: string);
}
