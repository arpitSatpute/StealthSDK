import type { GraphQLClient } from 'graphql-request';
import type { AnnouncementLog } from '../getAnnouncements/types';
import type { SubgraphAnnouncementEntity } from './types';
/**
 * The necessary pagination variables for the subgraph query.
 */
export type PaginationVariables = {
    first: number;
    skip: number;
};
/**
 * Asynchronous generator function to fetch paginated data from a subgraph.
 *
 * This function fetches data in reverse chronological order (newest first) by using
 * the 'id_lt' parameter for pagination. It recursively calls itself to fetch all pages
 * of data, using the lastId parameter as the starting point for each subsequent page.
 *
 * @template T - The type of entities being fetched, must have an 'id' property.
 * @param {Object} params - The parameters for the fetch operation.
 * @param {GraphQLClient} params.client - The GraphQL client instance.
 * @param {string} params.gqlQuery - The GraphQL query string with a '__WHERE_CLAUSE__' placeholder.
 * @param {number} params.pageSize - The number of items to fetch per page.
 * @param {string} params.filter - Additional filter criteria for the query.
 * @param {string} params.entity - The name of the entity being queried.
 * @param {string} [params.lastId] - The ID of the last item from the previous page, used for pagination.
 * @yields {T[]} An array of entities of type T for each page of results.
 * @throws {Error} If there's an error fetching the data from the subgraph.
 */
export declare function fetchPages<T extends {
    id: string;
}>({ client, gqlQuery, pageSize, filter, entity, lastId }: {
    client: GraphQLClient;
    gqlQuery: string;
    pageSize: number;
    filter: string;
    entity: string;
    lastId?: string;
}): AsyncGenerator<T[], void, unknown>;
/**
 * Converts a SubgraphAnnouncementEntity to an AnnouncementLog for interoperability
 * between `getAnnouncements` and `getAnnouncementsUsingSubgraph`.
 *
 * This function transforms the data structure returned by the subgraph into the
 * standardized AnnouncementLog format used throughout the SDK. It ensures consistency
 * in data representation regardless of whether announcements are fetched directly via logs
 * or via a subgraph.
 *
 * @param {SubgraphAnnouncementEntity} entity - The announcement entity from the subgraph.
 * @returns {AnnouncementLog} The converted announcement log in the standard format.
 */
export declare function convertSubgraphEntityToAnnouncementLog(entity: SubgraphAnnouncementEntity): AnnouncementLog;
