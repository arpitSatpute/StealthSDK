import { decodeEventLog } from 'viem';
import { getBlockNumber, getLogs } from 'viem/actions';
/**
 * Fetches and decodes logs in chunks to handle potentially large range queries efficiently.
 *
 * @template TAbi - The ABI type.
 * @param {FetchLogsParams<TAbi>} params - The parameters for fetching logs in chunks.
 * @returns {Promise<FetchLogsReturnType>} - A flattened array of all logs fetched in chunks, including decoded event data.
 *
 * @example
 * const logs = await fetchLogsInChunks({
 *   publicClient,
 *   abi: myContractABI,
 *   eventName: 'Transfer',
 *   address: '0x...',
 *   fromBlock: 1000000n,
 *   toBlock: 2000000n,
 *   chunkSize: 10000
 * });
 */
export const fetchLogsInChunks = async ({ publicClient, abi, eventName, address, args, fromBlock = 'earliest', toBlock = 'latest', chunkSize = 5000 }) => {
    const [start, end] = await Promise.all([
        fromBlock === 'earliest'
            ? 0n
            : typeof fromBlock === 'bigint'
                ? fromBlock
                : getBlockNumber(publicClient),
        toBlock === 'latest' ? getBlockNumber(publicClient) : toBlock
    ]);
    const eventAbi = abi.find((item) => item.type === 'event' && item.name === eventName);
    if (!eventAbi)
        throw new Error(`Event ${eventName} not found in ABI`);
    const allLogs = [];
    for (let currentBlock = start; currentBlock <= end; currentBlock += BigInt(chunkSize)) {
        const logs = await getLogs(publicClient, {
            address,
            event: eventAbi,
            args,
            fromBlock: currentBlock,
            toBlock: BigInt(Math.min(Number(currentBlock) + chunkSize - 1, Number(end))),
            strict: true
        });
        allLogs.push(...logs.map(log => ({
            ...log,
            ...decodeEventLog({
                abi,
                eventName,
                topics: log.topics,
                data: log.data
            })
        })));
    }
    return allLogs;
};
