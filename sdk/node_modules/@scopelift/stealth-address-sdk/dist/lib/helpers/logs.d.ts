import { type Abi, type ContractEventName, type DecodeEventLogReturnType, type GetEventArgs, type Log, type PublicClient } from 'viem';
/**
 * Parameters for fetching and decoding logs in chunks.
 * @template TAbi - The ABI type.
 */
type FetchLogsParams<TAbi extends Abi> = {
    /** An instance of the viem PublicClient. */
    publicClient: PublicClient;
    /** The ABI of the contract. */
    abi: TAbi;
    /** The name of the event to fetch logs for. */
    eventName: ContractEventName<TAbi>;
    /** The address of the contract. */
    address: `0x${string}`;
    /** Optional arguments to filter the logs. */
    args?: GetEventArgs<TAbi, ContractEventName<TAbi>>;
    /** The starting block number for the fetch. Defaults to 'earliest'. */
    fromBlock?: bigint | 'earliest';
    /** The ending block number for the fetch. Defaults to 'latest'. */
    toBlock?: bigint | 'latest';
    /** The number of blocks to query in each chunk. Defaults to 5000. */
    chunkSize?: number;
};
type FetchLogsReturnType<TAbi extends Abi> = Array<DecodeEventLogReturnType<TAbi, ContractEventName<TAbi>> & Log>;
/**
 * Fetches and decodes logs in chunks to handle potentially large range queries efficiently.
 *
 * @template TAbi - The ABI type.
 * @param {FetchLogsParams<TAbi>} params - The parameters for fetching logs in chunks.
 * @returns {Promise<FetchLogsReturnType>} - A flattened array of all logs fetched in chunks, including decoded event data.
 *
 * @example
 * const logs = await fetchLogsInChunks({
 *   publicClient,
 *   abi: myContractABI,
 *   eventName: 'Transfer',
 *   address: '0x...',
 *   fromBlock: 1000000n,
 *   toBlock: 2000000n,
 *   chunkSize: 10000
 * });
 */
export declare const fetchLogsInChunks: <TAbi extends Abi>({ publicClient, abi, eventName, address, args, fromBlock, toBlock, chunkSize }: FetchLogsParams<TAbi>) => Promise<FetchLogsReturnType<TAbi>>;
export {};
