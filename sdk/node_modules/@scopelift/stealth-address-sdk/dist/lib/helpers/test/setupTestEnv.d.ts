/// <reference types="bun-types" />
import type { VALID_CHAIN_IDS } from '../types';
export declare const LOCAL_ENDPOINT = "http://127.0.0.1:8545";
/**
 * Initializes a test environment for testing purposes.
 * Defaults to local anvil node usage or, alternatively, use a remote RPC URL by setting the TEST_RPC_URL environment variable
 * @returns An object containing the testing environment setup parameters including chain ID, contract addresses, and a stealth client instance.
 */
declare const setupTestEnv: () => Promise<{
    chainId: VALID_CHAIN_IDS;
    ERC5564Address: `0x${string}`;
    ERC5564DeployBlock: bigint;
    ERC6538Address: `0x${string}`;
    stealthClient: import("../../stealthClient/types").StealthActions;
}>;
/**
 * Validates the provided chain ID against a list of valid chain IDs.
 * @param {number} chainId - The chain ID to validate.
 * @returns {VALID_CHAIN_IDS} - The validated chain ID.
 * @throws {Error} If the chain ID is not valid.
 */
declare const getValidChainId: (chainId: number) => VALID_CHAIN_IDS;
/**
 * Retrieves the TEST RPC URL from env or defaults to foundry http.
 * @returns {string } The RPC URL.
 */
declare const getRpcUrl: () => string;
declare const getChainInfo: () => Promise<{
    chain: import("viem").Chain;
    chainId: VALID_CHAIN_IDS;
}>;
export declare const fetchChainId: () => Promise<number>;
declare const fetchJson: <T>(url: string, options: FetchRequestInit) => Promise<T>;
export { getValidChainId, getRpcUrl, getChainInfo, fetchJson };
export default setupTestEnv;
