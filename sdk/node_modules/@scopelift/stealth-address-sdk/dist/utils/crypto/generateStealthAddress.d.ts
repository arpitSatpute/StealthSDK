import { type EthAddress, type GenerateStealthAddressReturnType, type Hex, type HexString, type IGenerateStealthAddressParams, VALID_SCHEME_ID } from './types';
/**
 * @description Generates a stealth address from a given stealth meta-address.
 * This function is designed to support stealth address usage in accordance with the ERC-5564 standard
 * for Ethereum, focusing on the implementation of scheme 1 with extensibility for additional schemes.
 *
 * @param {IGenerateStealthAddressParams} params Parameters for generating a stealth address:
 * - `stealthMetaAddressURI`: The URI containing the stealth meta-address.
 *   Should adhere to the format: "st:\<chain\>:\<stealthMetaAddress\>",
 *   where <chain> is the chain identifier and <stealthMetaAddress> is the stealth meta-address.
 * - `schemeId`: (Optional) The scheme identifier, defaults to SCHEME_ID_1.
 * - `ephemeralPrivateKey`: (Optional) The ephemeral private key to use; if not provided, a new one is generated.
 * @returns {GenerateStealthAddressReturnType} Object containing:
 *   - `stealthAddress`: The generated stealth address.
 *   - `ephemeralPublicKey`: The ephemeral public key used to generate the stealth address.
 *   - `viewTag`: The view tag derived from the hashed shared secret.
 */
declare function generateStealthAddress({ stealthMetaAddressURI, schemeId, ephemeralPrivateKey }: IGenerateStealthAddressParams): GenerateStealthAddressReturnType;
/**
 * @description Parses a stealth meta-address URI and extracts the address data.
 * Validates the structure and format of the stealth meta-address.
 *
 * @param {object} params - Parameters for parsing the stealth meta-address URI:
 *   - stealthMetaAddressURI: The URI containing the stealth meta-address, or alternatively, the stealth meta-address itself.
 *   - schemeId: The scheme identifier.
 * @returns {HexString} The extracted stealth meta-address.
 */
declare function parseStealthMetaAddressURI({ stealthMetaAddressURI, schemeId }: {
    stealthMetaAddressURI: string | HexString;
    schemeId: VALID_SCHEME_ID;
}): HexString;
/**
 * @description Validates a compressed public key.
 * A compressed public key is a 66-character hexadecimal string that starts with '02' or '03'.
 * The function takes a non '0x' prefixed public key as input.
 * @param publicKey
 * @returns
 */
declare function isValidCompressedPublicKey(publicKey: string): boolean;
/**
 * @description Extracts and validates the spending and viewing public keys from a stealth meta-address.
 *
 * @param {object} params - Parameters for extracting keys from a stealth meta-address:
 *   - stealthMetaAddress: The stealth meta-address as a hex string (prefixed with `0x`).
 *   - schemeId: The scheme identifier.
 * @returns {object} An object containing:
 *   - spendingPublicKey: The extracted spending public key.
 *   - viewingPublicKey: The extracted viewing public key.
 */
declare function parseKeysFromStealthMetaAddress({ stealthMetaAddress, schemeId }: {
    stealthMetaAddress: HexString;
    schemeId: VALID_SCHEME_ID;
}): {
    spendingPublicKey: Uint8Array;
    viewingPublicKey: Uint8Array;
};
/**
 * @description Hashes the shared secret based on the scheme.
 *
 * @param {object} params - Parameters for hashing the shared secret:
 *   - sharedSecret: The shared secret to be hashed.
 *   - schemeId: The scheme identifier.
 * @returns {HexString} The hashed shared secret.
 */
declare function getHashedSharedSecret({ sharedSecret, schemeId }: {
    sharedSecret: Hex;
    schemeId: VALID_SCHEME_ID;
}): HexString;
declare function handleSchemeId(schemeId: VALID_SCHEME_ID): void;
/**
 * @description Generates or validates an ephemeral private key.
 *
 * @param {object} params - Parameters for generating or validating the private key:
 *   - ephemeralPrivateKey: (optional) The ephemeral private key to validate.
 *   - schemeId: The scheme identifier.
 * @returns {Uint8Array} The validated or generated private key.
 */
declare function generatePrivateKey({ ephemeralPrivateKey, schemeId }: {
    ephemeralPrivateKey?: Uint8Array;
    schemeId: VALID_SCHEME_ID;
}): Uint8Array;
/**
 * @description Extracts the view tag from the hashed shared secret.
 *
 * @param {object} params - Parameters for extracting the view tag:
 *   - hashedSharedSecret: The hashed shared secret.
 *   - schemeId: The scheme identifier.
 * @returns {HexString} The extracted view tag.
 */
declare function getViewTag({ hashedSharedSecret, schemeId }: {
    hashedSharedSecret: Hex;
    schemeId: VALID_SCHEME_ID;
}): HexString;
/**
 * @description Calculates the stealth public key; for scheme 1, adds the hashed shared secret point to the spending public key.
 *
 * @param {object} params - Parameters for calculating the stealth public key:
 *   - spendingPublicKey: The spending public key.
 *   - hashedSharedSecret: The hashed shared secret.
 *   - schemeId: The scheme identifier.
 * @returns {Uint8Array} The stealth public key.
 */
declare function getStealthPublicKey({ spendingPublicKey, hashedSharedSecret, schemeId }: {
    spendingPublicKey: Uint8Array;
    hashedSharedSecret: HexString;
    schemeId: VALID_SCHEME_ID;
}): Uint8Array;
/**
 * @description Converts a public key to an Ethereum address.
 *
 * @param {object} params - Parameters for converting the public key to an address:
 *   - publicKey: The public key.
 *   - schemeId: The scheme identifier.
 * @returns {EthAddress} The Ethereum address derived from the public key.
 */
declare function publicKeyToAddress({ publicKey, schemeId }: {
    publicKey: Hex;
    schemeId: VALID_SCHEME_ID;
}): EthAddress;
export { generatePrivateKey, generateStealthAddress, getHashedSharedSecret, getStealthPublicKey, getViewTag, handleSchemeId, parseKeysFromStealthMetaAddress, parseStealthMetaAddressURI, publicKeyToAddress, isValidCompressedPublicKey };
export default generateStealthAddress;
