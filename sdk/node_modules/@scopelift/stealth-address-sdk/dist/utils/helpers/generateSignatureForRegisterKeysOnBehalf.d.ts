import { type GenerateSignatureForRegisterKeysParams } from './types';
/**
 * Generates a typed signature for registering keys on behalf of a user (account) in the ERC6538 Registry.
 *
 * This function creates an EIP-712 compliant signature for the `registerKeysOnBehalf` function
 * in the ERC6538 Registry contract. It retrieves the current nonce for the account, prepares
 * the domain separator and message, and signs the data using the provided Viem wallet client.
 *
 * @param {GenerateSignatureForRegisterKeysParams} params - The parameters for generating the signature.
 * @returns {Promise<`0x${string}`>} A promise that resolves to the generated signature as a hexadecimal string.
 *
 * @throws {GenerateSignatureForRegisterKeysError} If the contract read fails or if the signing process encounters an issue.
 *
 * @example
 * const signature = await generateSignatureForRegisterKeysOnBehalf({
 *   walletClient,
 *   account: '0x1234...5678',
 *   ERC6538Address: '0xabcd...ef01',
 *   chainId: 1,
 *   schemeId: 1,
 *   stealthMetaAddressToRegister: '0x9876...5432'
 * });
 */
declare function generateSignatureForRegisterKeysOnBehalf({ walletClient, account, ERC6538Address, chainId, schemeId, stealthMetaAddressToRegister }: GenerateSignatureForRegisterKeysParams): Promise<`0x${string}`>;
export default generateSignatureForRegisterKeysOnBehalf;
